#include "plugin.h"
#include "client.h"

#include <stdlib.h>
#include <string.h>

#include <pthread.h>

#include <iostream>
#include <queue>

#define PNAME "[PluginMysql] "

#define TRACE() do { std::cerr << PNAME << __FUNCTION__ << std::endl; } while(0)

class PluginMysql: public Plugin
{
    public:
        virtual bool OnLoad(Server *server, int plugin_index)
        {
            TRACE();

            pthread_mutex_init(&m_mutex, NULL);
            pthread_cond_init(&m_cond, NULL);
            pthread_create(&m_tid, NULL, MysqlThread, this);
            
            return true;
        }
        virtual void OnDestroy(Server *server, int plugin_index)
        {
            TRACE();
            pthread_join(m_tid, NULL);
        }
        virtual bool OnInit(Client *client, int plugin_index)
        {
            TRACE();
            return true;
        }
        virtual void OnClose(Client *client, int plugin_index)
        {
            TRACE();
        }
        virtual bool BeforeRequest(Client *client, int plugin_index)
        {
            TRACE();
            return true;
        }
        virtual bool AfterRequest(Client *client, int plugin_index)
        {
            TRACE();
            return true; 
        }
        virtual PluginStatus OnResponse(Client *client, int plugin_index)
        {
            TRACE();
            return OK;
        }

        static void * MysqlThread(void *arg)
        {
            TRACE();
            
            PluginMysql *plugin = (PluginMysql*)arg;

            pthread_mutex_lock();
            while ()

            return NULL;
        }

    private:
        pthread_t           m_tid;
        pthread_mutex_t     m_mutex;
        pthread_cond_t      m_cond;
        std::queue<Client*> m_task_queue;
};

extern "C" Plugin* SetupPlugin()
{
    TRACE();
    return new PluginMysql();
}
extern "C" void RemovePlugin(Plugin *plugin)
{
    TRACE();
    delete plugin;
}
